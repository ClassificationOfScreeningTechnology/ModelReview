# -*- coding: utf-8 -*-
"""Analiza datasetu.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Cej1d8UOS8ujCiFQlHUfmUeL60fYBxu-

# Analiza Data Setu

## 1.0 Pobieranie bibliotek
"""

!pip install opencv-python-headless matplotlib
!pip install ipywidgets
!pip install datasets

"""## 2.0 Import bibliotek

"""

import os
import shutil
import random
from PIL import Image
import cv2
import numpy as np
import matplotlib.pyplot as plt
import ipywidgets as widgets
from IPython.display import display
from datasets import load_dataset

"""## 3.0 Pobieranie datasetu"""

ds = load_dataset("krowiemlekommm/animation_dataset_04_01_2025")

print(ds)

print(ds['train'][0])

"""### 3.1 Załadowanie danych"""

label_map = {
    0: "2d_animation",
    1: "3d_animation",
    2: "live_action",
    3: "stop_motion"
}

output_dir = '/content/animation_types_working'

if not os.path.exists(output_dir):
    os.makedirs(output_dir)

for category in label_map.values():
    category_dir = os.path.join(output_dir, category)
    if not os.path.exists(category_dir):
        os.makedirs(category_dir)

def save_images_by_category(dataset, split_name):
    for item in dataset:
        image = item['image']
        label = item['label']
        category_name = label_map[label]

        category_dir = os.path.join(output_dir, category_name)
        image_count = len(os.listdir(category_dir))
        image_path = os.path.join(category_dir, f"{split_name}_{image_count}.jpg")

        if image.mode in ['RGBA', 'P']:
            image = image.convert('RGB')

        image.save(image_path)

"""## 4.0 Podstawowa eksploracja danych

### 4.1 Funkcje
"""

working_dir = '/content/animation_types_working'
categories = ['2d_animation', '3d_animation', 'live_action', 'stop_motion']

"""Zliczanie elmentów w każdej z kategorii"""

def count_files_in_categories(base_dir, categories):
    category_counts = {}
    for category in categories:
        category_dir = os.path.join(base_dir, category)
        if os.path.exists(category_dir):
            num_files = len([f for f in os.listdir(category_dir) if os.path.isfile(os.path.join(category_dir, f))])
            category_counts[category] = num_files
        else:
            category_counts[category] = 0
    return category_counts

category_counts = count_files_in_categories(working_dir, categories)

for category, count in category_counts.items():
    print(f"Kategoria '{category}' zawiera {count} plików.")

"""Funkcja do analizy rozdzielczości obrazów"""

# Analizy rozdzielczości obrazów dla każdej kategorii
def analyze_image_resolution(base_dir, categories):
    resolutions = {}

    for category in categories:
        category_dir = os.path.join(base_dir, category)
        if os.path.exists(category_dir):
            category_resolutions = []
            images = [f for f in os.listdir(category_dir) if os.path.isfile(os.path.join(category_dir, f))]

            for img_name in images:
                img_path = os.path.join(category_dir, img_name)
                img = Image.open(img_path)
                width, height = img.size  # Wymiary obrazu
                category_resolutions.append((width, height))

            resolutions[category] = category_resolutions

    return resolutions

# Obliczania średnich wymiarów i odchylenia standardowego dla każdej kategorii
def calculate_resolution_statistics(resolutions):
    resolution_stats = {}

    for category, resolution_list in resolutions.items():
        widths = [res[0] for res in resolution_list]
        heights = [res[1] for res in resolution_list]

        avg_width = np.mean(widths)
        avg_height = np.mean(heights)
        std_width = np.std(widths)
        std_height = np.std(heights)

        resolution_stats[category] = {
            "average_width": avg_width,
            "average_height": avg_height,
            "std_width": std_width,
            "std_height": std_height
        }

    return resolution_stats

def plot_resolution_statistics(resolution_stats):
    categories = list(resolution_stats.keys())
    avg_widths = [stats["average_width"] for stats in resolution_stats.values()]
    avg_heights = [stats["average_height"] for stats in resolution_stats.values()]
    std_widths = [stats["std_width"] for stats in resolution_stats.values()]
    std_heights = [stats["std_height"] for stats in resolution_stats.values()]

    x = np.arange(len(categories))
    width = 0.35

    fig, ax = plt.subplots(figsize=(10, 6))
    ax.bar(x - width/2, avg_widths, width, label='Średnia szerokość', color='#FFDD44')
    ax.bar(x + width/2, avg_heights, width, label='Średnia wysokość', color='#4F4F9F')

    ax.set_xlabel('Kategorie')
    ax.set_ylabel('Średni wymiar (px)')
    ax.set_title('Średnia szerokość i wysokość obrazów dla każdej kategorii')
    ax.set_xticks(x)
    ax.set_xticklabels(categories)
    ax.legend()
    ax.set_ylim(0, 1000)
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    plt.show()

    fig, ax = plt.subplots(figsize=(10, 6))
    ax.bar(x - width/2, std_widths, width, label='Odchylenie szerokości', color='#FFDD44')
    ax.bar(x + width/2, std_heights, width, label='Odchylenie wysokości', color='#4F4F9F')

    ax.set_xlabel('Kategorie')
    ax.set_ylabel('Odchylenie standardowe (px)')
    ax.set_title('Odchylenie standardowe szerokości i wysokości obrazów dla każdej kategorii')
    ax.set_xticks(x)
    ax.set_xticklabels(categories)
    ax.legend()
    ax.set_ylim(0, 1000)
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    plt.show()

"""### 4.2 Ilość zdjęć w każdej z klas

"""

categories = list(category_counts.keys())
counts = list(category_counts.values())

plt.figure(figsize=(10, 8))
plt.bar(categories, counts, color='#4F4F9F')

plt.xlabel('Kategorie', fontsize=14)
plt.ylabel('Liczba obrazów', fontsize=14)
plt.title('Liczba obrazów w każdej kategorii', fontsize=16)

plt.ylim(0, 2000)

for i, count in enumerate(counts):
    plt.text(i, count + 20, str(count), ha='center', fontsize=12)

plt.show()

"""### 4.3 Analiza rozdzielczości obrazów"""

resolutions = analyze_image_resolution(working_dir, categories)

resolution_stats = calculate_resolution_statistics(resolutions)

for category, stats in resolution_stats.items():
    print(f"Kategoria: {category}")
    print(f"  Średnia szerokość: {stats['average_width']:.2f} px")
    print(f"  Średnia wysokość: {stats['average_height']:.2f} px")
    print(f"  Odchylenie standardowe szerokości: {stats['std_width']:.2f} px")
    print(f"  Odchylenie standardowe wysokości: {stats['std_height']:.2f} px")
    print()

plot_resolution_statistics(resolution_stats)

"""## 5.0 Analiza jakości obrazów

### 5.1 Funkcje
"""

category_2d_animation = os.path.join(working_dir, '2d_animation')
category_3d_animation = os.path.join(working_dir, '3d_animation')
category_live_action = os.path.join(working_dir, 'live_action')
category_stop_motion = os.path.join(working_dir, 'stop_motion')

""" Funkcja do oceny ostrości przy użyciu operatora Laplace'a"""

def analyze_sharpness(category_dir):
    sharpness_scores = []
    images = [f for f in os.listdir(category_dir) if os.path.isfile(os.path.join(category_dir, f))]

    for img_name in images:
        img_path = os.path.join(category_dir, img_name)
        img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE) 
        laplacian = cv2.Laplacian(img, cv2.CV_64F)
        score = np.var(laplacian)
        sharpness_scores.append(score)

    return sharpness_scores

def analyze_sharpness_all_classes(working_dir, categories, bins=20):
    sharpness_results = {}
    max_sharpness = 0
    max_count_y = 0

    for category in categories:
        category_dir = os.path.join(working_dir, category)
        sharpness_scores = analyze_sharpness(category_dir)
        sharpness_results[category] = sharpness_scores

        if sharpness_scores:
            max_sharpness = max(max_sharpness, max(sharpness_scores))

        counts, _ = np.histogram(sharpness_scores, bins=bins, range=(0, max_sharpness))
        max_count_y = max(max_count_y, max(counts))

    return sharpness_results, max_sharpness, max_count_y

sharpness_results, max_sharpness, max_count_y = analyze_sharpness_all_classes(working_dir, categories)

def plot_sharpness_single_class(category):
    if category in sharpness_results:
        sharpness_scores = sharpness_results[category]
        plt.figure(figsize=(8, 6))
        plt.hist(sharpness_scores, bins=20, range=(0, max_sharpness), color='#4F4F9F', alpha=0.7)
        plt.title(f'Ocena ostrości dla kategorii: {category}', fontsize=16)
        plt.xlabel('Ostrość (Wariancja Laplace\'a)', fontsize=12)
        plt.ylabel('Liczba obrazów', fontsize=12)
        # plt.xlim([0, max_sharpness])
        # plt.ylim([0, (max_count_y + 2000)])
        plt.xlim([0, max_sharpness])
        plt.ylim([0, 2000])
        plt.grid(True)
        plt.show()


def plot_sharpness_all_classes():
    plt.figure(figsize=(10, 6))

    colors = ['#FF5733', '#33C3FF', '#8DFF33', '#FF33A6']
    for i, (category, sharpness_scores) in enumerate(sharpness_results.items()):
        plt.hist(sharpness_scores, bins=20, range=(0, max_sharpness), alpha=0.6, label=category, color=colors[i], histtype='stepfilled')

    plt.title('Ocena ostrości dla wszystkich kategorii', fontsize=16)
    plt.xlabel('Ostrość (Wariancja Laplace\'a)', fontsize=12)
    plt.ylabel('Liczba obrazów', fontsize=12)
    # plt.xlim([0, max_sharpness])
    # plt.ylim([0, (max_count_y + 1000)])

    plt.xlim([0, max_sharpness])
    plt.ylim([0, 2000])
    plt.legend(loc='upper right')
    plt.grid(True)
    plt.show()

"""Funkcja do wykrywania artefaktów, np. pikselizacji, za pomocą analizy gradientu krawędzi

"""

import cv2
import numpy as np
import os
import matplotlib.pyplot as plt

# Wkrywania artefaktów za pomocą analizy gradientu krawędzi
def detect_artifacts(category_dir):
    artifact_scores = []
    images = [f for f in os.listdir(category_dir) if os.path.isfile(os.path.join(category_dir, f))]

    for img_name in images:
        img_path = os.path.join(category_dir, img_name)
        img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)

        if img is None:
            continue

        sobelx = cv2.Sobel(img, cv2.CV_64F, 1, 0, ksize=5)
        sobely = cv2.Sobel(img, cv2.CV_64F, 0, 1, ksize=5)
        sobel_magnitude = np.sqrt(sobelx**2 + sobely**2)

        score = np.mean(sobel_magnitude)
        artifact_scores.append(score)

    return artifact_scores

# Analizy artefaktów dla wszystkich klas
def detect_artifacts_all_classes(working_dir, categories, bins=20):
    artifact_results = {}
    max_artifact_score = 0
    max_count_y = 0

    for category in categories:
        category_dir = os.path.join(working_dir, category)
        artifact_scores = detect_artifacts(category_dir)
        artifact_results[category] = artifact_scores

        if artifact_scores:
            max_artifact_score = max(max_artifact_score, max(artifact_scores))

        counts, _ = np.histogram(artifact_scores, bins=bins, range=(0, max_artifact_score))
        max_count_y = max(max_count_y, max(counts))

    return artifact_results, max_artifact_score, max_count_y

artifact_results, max_artifact_score, max_count_y = detect_artifacts_all_classes(working_dir, categories)

def plot_artifacts_single_class(category):
    if category in artifact_results:
        artifact_scores = artifact_results[category]
        plt.figure(figsize=(8, 6))
        plt.hist(artifact_scores, bins=20, range=(0, max_artifact_score), color='#4F4F9F', alpha=0.7)
        plt.title(f'Ocena artefaktów dla kategorii: {category}', fontsize=16)
        plt.xlabel('Wskaźnik artefaktów (średni gradient Sobel\'a)', fontsize=12)
        plt.ylabel('Liczba obrazów', fontsize=12)
        plt.xlim([0, max_artifact_score])
        plt.ylim([0, 1000])
        plt.grid(True)
        plt.show()


def plot_artifacts_all_classes():
    plt.figure(figsize=(10, 6))

    colors = ['#FF5733', '#33C3FF', '#8DFF33', '#FF33A6']
    for i, (category, artifact_scores) in enumerate(artifact_results.items()):
        plt.hist(artifact_scores, bins=20, range=(0, max_artifact_score), alpha=0.6, label=category, color=colors[i], histtype='stepfilled')

    plt.title('Ocena artefaktów dla wszystkich kategorii', fontsize=16)
    plt.xlabel('Wskaźnik artefaktów (średni gradient Sobel\'a)', fontsize=12)
    plt.ylabel('Liczba obrazów', fontsize=12)
    plt.xlim([0, max_artifact_score])
    plt.ylim([0, 1000])
    plt.legend(loc='upper right')
    plt.grid(True)
    plt.show()

"""Funkcja do wyświetlenia histogramów kolorów dla kategorii"""

# Analizy histogramów kolorów dla jednej kategorii
def analyze_color_histograms(category_dir):
    histograms = {'r': [], 'g': [], 'b': []}
    images = [f for f in os.listdir(category_dir) if os.path.isfile(os.path.join(category_dir, f))]

    for img_name in images:
        img_path = os.path.join(category_dir, img_name)
        img = cv2.imread(img_path)

        color_hist_r = cv2.calcHist([img], [2], None, [256], [0, 256]).flatten()
        color_hist_g = cv2.calcHist([img], [1], None, [256], [0, 256]).flatten()
        color_hist_b = cv2.calcHist([img], [0], None, [256], [0, 256]).flatten()

        histograms['r'].append(color_hist_r)
        histograms['g'].append(color_hist_g)
        histograms['b'].append(color_hist_b)

    avg_histograms = {
        'r': np.mean(histograms['r'], axis=0),
        'g': np.mean(histograms['g'], axis=0),
        'b': np.mean(histograms['b'], axis=0)
    }

    return avg_histograms

# Analizy wszystkich klas
def analyze_color_histograms_all_classes(working_dir, categories):
    color_hist_results = {}
    max_count_y = 0

    for category in categories:
        category_dir = os.path.join(working_dir, category)
        avg_histograms = analyze_color_histograms(category_dir)
        color_hist_results[category] = avg_histograms

        for color in ['r', 'g', 'b']:
            max_count_y = max(max_count_y, max(avg_histograms[color]))

    return color_hist_results, max_count_y

color_hist_results, max_count_y = analyze_color_histograms_all_classes(working_dir, categories)

def plot_color_histogram_single_class(category):
    if category in color_hist_results:
        avg_histograms = color_hist_results[category]

        plt.figure(figsize=(10, 6))

        plt.plot(avg_histograms['r'], color='red', label='Czerwony')
        plt.plot(avg_histograms['g'], color='green', label='Zielony')
        plt.plot(avg_histograms['b'], color='blue', label='Niebieski')

        plt.title(f'Średni histogram kolorów dla kategorii: {category}', fontsize=16)
        plt.xlabel('Wartość koloru (0-255)', fontsize=12)
        plt.ylabel('Liczba pikseli', fontsize=12)
        plt.ylim([0, max_count_y])
        plt.legend()
        plt.grid(True)
        plt.show()

"""### 5.2 Ostrość obrazów"""

plot_sharpness_single_class('2d_animation')

plot_sharpness_single_class('3d_animation')

plot_sharpness_single_class('stop_motion')

plot_sharpness_single_class('live_action')

plot_sharpness_all_classes()

"""### 5.3 Wskaźnik artefaktów"""

plot_artifacts_single_class('2d_animation')

plot_artifacts_single_class('3d_animation')

plot_artifacts_single_class('live_action')

plot_artifacts_single_class('stop_motion')

plot_artifacts_all_classes()

"""### 5.4 Histogram kolorów"""

plot_color_histogram_single_class('2d_animation')

plot_color_histogram_single_class('3d_animation')

plot_color_histogram_single_class('stop_motion')

plot_color_histogram_single_class('live_action')

"""## 6.0 Spójność wizualna i różnorodność danych

### 6.1 Funkcje
"""

def show_random_images(base_dir, categories, num_images=3):
    fig, axes = plt.subplots(len(categories), num_images, figsize=(15, 10))
    fig.suptitle('Przykładowe obrazy z każdej kategorii', fontsize=16)

    for i, category in enumerate(categories):
        category_dir = os.path.join(base_dir, category)
        images = [f for f in os.listdir(category_dir) if os.path.isfile(os.path.join(category_dir, f))]

        if len(images) >= num_images:
            random_images = random.sample(images, num_images)
        else:
            random_images = images

        for j, img_name in enumerate(random_images):
            img_path = os.path.join(category_dir, img_name)
            img = Image.open(img_path)
            axes[i, j].imshow(img)
            axes[i, j].axis('off')
            axes[i, j].set_title(f"{category}")

    plt.tight_layout(rect=[0, 0, 1, 0.95])
    plt.show()

"""Klasa do przeglądania zdjęć"""

class ImageBrowser:
    def __init__(self, category_dir):
        self.category_dir = category_dir
        self.images = [f for f in os.listdir(category_dir) if os.path.isfile(os.path.join(category_dir, f))]
        self.index = 0

        self.prev_button = widgets.Button(description="⟵ Lewo")
        self.prev_button.on_click(self.on_prev)

        self.next_button = widgets.Button(description="Prawo ⟶")
        self.next_button.on_click(self.on_next)

        self.image_widget = widgets.Image()
        self.update_image()

        display(widgets.HBox([self.prev_button, self.next_button]))
        display(self.image_widget)

    def update_image(self):
        img_path = os.path.join(self.category_dir, self.images[self.index])
        with open(img_path, 'rb') as file:
            image_data = file.read()
        self.image_widget.value = image_data

    def on_prev(self, _):
        self.index = (self.index - 1) % len(self.images)
        self.update_image()

    def on_next(self, _):
        self.index = (self.index + 1) % len(self.images)
        self.update_image()

def browse_category_images(working_dir, category):
    category_dir = os.path.join(working_dir, category)
    if os.path.exists(category_dir):
        print(f"Przeglądanie zdjęć z kategorii: {category}")
        ImageBrowser(category_dir)

"""### 6.2 Randomowe zdjęcia z każdej z klas"""

show_random_images(working_dir, categories, num_images=3)

"""### 6.3 Przeglądanie zdjęć"""

browse_category_images(working_dir, '2d_animation')

browse_category_images(working_dir, '3d_animation')

browse_category_images(working_dir, 'live_action')

browse_category_images(working_dir, 'stop_motion')
